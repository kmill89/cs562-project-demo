import subprocess


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    body = """
    input_file = "./input.txt"
    phi_components = {}
    
    with open(input_file, 'r') as f:
        lines = f.readlines()
        
    section = None
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        if line == "SELECT ATTRIBUTE(S):":
            section = "select"
            phi_components["select"] = []
            continue
        elif line == "NUMBER OF GROUPING VARIABLES(n):":
            section = "num_vars"
            continue
        elif line == "GROUPING ATTRIBUTES(V):":
            section = "group_attrs"
            phi_components["group_attrs"] = []
            continue
        elif line == "F-VECT([F]):":
            section = "agg_funcs"
            phi_components["agg_funcs"] = []
            continue
        elif line == "SELECT CONDITION-VECT([Ïƒ]):" or line == "SELECT CONDITION-VECT([C]):":
            section = "conditions"
            phi_components["conditions"] = []
            continue
        elif line == "HAVING_CONDITION(G):":
            section = "having"
            continue
            
        if section == "select":
            phi_components["select"] = [attr.strip() for attr in line.split(',')]
        elif section == "num_vars":
            phi_components["num_vars"] = int(line)
        elif section == "group_attrs":
            phi_components["group_attrs"] = [attr.strip() for attr in line.split(',')]
        elif section == "agg_funcs":
            phi_components["agg_funcs"] = [func.strip() for func in line.split(',')]
        elif section == "conditions":
            phi_components["conditions"].append(line.strip())
        elif section == "having":
            phi_components["having"] = line.strip()


    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
